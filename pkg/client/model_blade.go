/*
Composable Fabric Manager Service OpenAPI

This API allows users to interact through the CFM Service with CXL Hosts and Memory Appliances. The main purpose of this interface is to allow the retrieval of information and the creation and mapping of memory from a Memory Appliance to a CXL host.

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Blade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Blade{}

// Blade struct for Blade
type Blade struct {
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	Id string `json:"id"`
	// The IP Address in dot notation of the service
	IpAddress string `json:"ipAddress"`
	Port      int32  `json:"port"`
	// A response string
	Status    *string     `json:"status,omitempty"`
	Ports     *MemberItem `json:"ports,omitempty"`
	Resources *MemberItem `json:"resources,omitempty"`
	Memory    *MemberItem `json:"memory,omitempty"`
	// A mebibyte equals 2**20 or 1,048,576 bytes.
	TotalMemoryAvailableMiB *int32 `json:"totalMemoryAvailableMiB,omitempty"`
	// A mebibyte equals 2**20 or 1,048,576 bytes.
	TotalMemoryAllocatedMiB *int32 `json:"totalMemoryAllocatedMiB,omitempty"`
}

// NewBlade instantiates a new Blade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlade(id string, ipAddress string, port int32) *Blade {
	this := Blade{}
	this.Id = id
	this.IpAddress = ipAddress
	this.Port = port
	return &this
}

// NewBladeWithDefaults instantiates a new Blade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBladeWithDefaults() *Blade {
	this := Blade{}
	return &this
}

// GetId returns the Id field value
func (o *Blade) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Blade) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Blade) SetId(v string) {
	o.Id = v
}

// GetIpAddress returns the IpAddress field value
func (o *Blade) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *Blade) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *Blade) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetPort returns the Port field value
func (o *Blade) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *Blade) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *Blade) SetPort(v int32) {
	o.Port = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Blade) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blade) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Blade) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Blade) SetStatus(v string) {
	o.Status = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *Blade) GetPorts() MemberItem {
	if o == nil || IsNil(o.Ports) {
		var ret MemberItem
		return ret
	}
	return *o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blade) GetPortsOk() (*MemberItem, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *Blade) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given MemberItem and assigns it to the Ports field.
func (o *Blade) SetPorts(v MemberItem) {
	o.Ports = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Blade) GetResources() MemberItem {
	if o == nil || IsNil(o.Resources) {
		var ret MemberItem
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blade) GetResourcesOk() (*MemberItem, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Blade) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given MemberItem and assigns it to the Resources field.
func (o *Blade) SetResources(v MemberItem) {
	o.Resources = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Blade) GetMemory() MemberItem {
	if o == nil || IsNil(o.Memory) {
		var ret MemberItem
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blade) GetMemoryOk() (*MemberItem, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Blade) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given MemberItem and assigns it to the Memory field.
func (o *Blade) SetMemory(v MemberItem) {
	o.Memory = &v
}

// GetTotalMemoryAvailableMiB returns the TotalMemoryAvailableMiB field value if set, zero value otherwise.
func (o *Blade) GetTotalMemoryAvailableMiB() int32 {
	if o == nil || IsNil(o.TotalMemoryAvailableMiB) {
		var ret int32
		return ret
	}
	return *o.TotalMemoryAvailableMiB
}

// GetTotalMemoryAvailableMiBOk returns a tuple with the TotalMemoryAvailableMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blade) GetTotalMemoryAvailableMiBOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalMemoryAvailableMiB) {
		return nil, false
	}
	return o.TotalMemoryAvailableMiB, true
}

// HasTotalMemoryAvailableMiB returns a boolean if a field has been set.
func (o *Blade) HasTotalMemoryAvailableMiB() bool {
	if o != nil && !IsNil(o.TotalMemoryAvailableMiB) {
		return true
	}

	return false
}

// SetTotalMemoryAvailableMiB gets a reference to the given int32 and assigns it to the TotalMemoryAvailableMiB field.
func (o *Blade) SetTotalMemoryAvailableMiB(v int32) {
	o.TotalMemoryAvailableMiB = &v
}

// GetTotalMemoryAllocatedMiB returns the TotalMemoryAllocatedMiB field value if set, zero value otherwise.
func (o *Blade) GetTotalMemoryAllocatedMiB() int32 {
	if o == nil || IsNil(o.TotalMemoryAllocatedMiB) {
		var ret int32
		return ret
	}
	return *o.TotalMemoryAllocatedMiB
}

// GetTotalMemoryAllocatedMiBOk returns a tuple with the TotalMemoryAllocatedMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blade) GetTotalMemoryAllocatedMiBOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalMemoryAllocatedMiB) {
		return nil, false
	}
	return o.TotalMemoryAllocatedMiB, true
}

// HasTotalMemoryAllocatedMiB returns a boolean if a field has been set.
func (o *Blade) HasTotalMemoryAllocatedMiB() bool {
	if o != nil && !IsNil(o.TotalMemoryAllocatedMiB) {
		return true
	}

	return false
}

// SetTotalMemoryAllocatedMiB gets a reference to the given int32 and assigns it to the TotalMemoryAllocatedMiB field.
func (o *Blade) SetTotalMemoryAllocatedMiB(v int32) {
	o.TotalMemoryAllocatedMiB = &v
}

func (o Blade) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Blade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ipAddress"] = o.IpAddress
	toSerialize["port"] = o.Port
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.TotalMemoryAvailableMiB) {
		toSerialize["totalMemoryAvailableMiB"] = o.TotalMemoryAvailableMiB
	}
	if !IsNil(o.TotalMemoryAllocatedMiB) {
		toSerialize["totalMemoryAllocatedMiB"] = o.TotalMemoryAllocatedMiB
	}
	return toSerialize, nil
}

type NullableBlade struct {
	value *Blade
	isSet bool
}

func (v NullableBlade) Get() *Blade {
	return v.value
}

func (v *NullableBlade) Set(val *Blade) {
	v.value = val
	v.isSet = true
}

func (v NullableBlade) IsSet() bool {
	return v.isSet
}

func (v *NullableBlade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlade(val *Blade) *NullableBlade {
	return &NullableBlade{value: val, isSet: true}
}

func (v NullableBlade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
