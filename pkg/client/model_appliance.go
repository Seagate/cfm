/*
Composable Fabric Manager Service OpenAPI

This API allows users to interact through the CFM Service with CXL Hosts and Memory Appliances. The main purpose of this interface is to allow the retrieval of information and the creation and mapping of memory from a Memory Appliance to a CXL host.

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Appliance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Appliance{}

// Appliance struct for Appliance
type Appliance struct {
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	Id string `json:"id"`
	// The IP Address in dot notation of the service
	IpAddress *string `json:"ipAddress,omitempty"`
	Port      *int32  `json:"port,omitempty"`
	// A response string
	Status *string     `json:"status,omitempty"`
	Blades *MemberItem `json:"blades,omitempty"`
	// A mebibyte equals 2**20 or 1,048,576 bytes.
	TotalMemoryAvailableMiB *int32 `json:"totalMemoryAvailableMiB,omitempty"`
	// A mebibyte equals 2**20 or 1,048,576 bytes.
	TotalMemoryAllocatedMiB *int32 `json:"totalMemoryAllocatedMiB,omitempty"`
}

// NewAppliance instantiates a new Appliance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppliance(id string) *Appliance {
	this := Appliance{}
	this.Id = id
	return &this
}

// NewApplianceWithDefaults instantiates a new Appliance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceWithDefaults() *Appliance {
	this := Appliance{}
	return &this
}

// GetId returns the Id field value
func (o *Appliance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Appliance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Appliance) SetId(v string) {
	o.Id = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *Appliance) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appliance) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Appliance) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *Appliance) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Appliance) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appliance) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Appliance) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Appliance) SetPort(v int32) {
	o.Port = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Appliance) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appliance) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Appliance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Appliance) SetStatus(v string) {
	o.Status = &v
}

// GetBlades returns the Blades field value if set, zero value otherwise.
func (o *Appliance) GetBlades() MemberItem {
	if o == nil || IsNil(o.Blades) {
		var ret MemberItem
		return ret
	}
	return *o.Blades
}

// GetBladesOk returns a tuple with the Blades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appliance) GetBladesOk() (*MemberItem, bool) {
	if o == nil || IsNil(o.Blades) {
		return nil, false
	}
	return o.Blades, true
}

// HasBlades returns a boolean if a field has been set.
func (o *Appliance) HasBlades() bool {
	if o != nil && !IsNil(o.Blades) {
		return true
	}

	return false
}

// SetBlades gets a reference to the given MemberItem and assigns it to the Blades field.
func (o *Appliance) SetBlades(v MemberItem) {
	o.Blades = &v
}

// GetTotalMemoryAvailableMiB returns the TotalMemoryAvailableMiB field value if set, zero value otherwise.
func (o *Appliance) GetTotalMemoryAvailableMiB() int32 {
	if o == nil || IsNil(o.TotalMemoryAvailableMiB) {
		var ret int32
		return ret
	}
	return *o.TotalMemoryAvailableMiB
}

// GetTotalMemoryAvailableMiBOk returns a tuple with the TotalMemoryAvailableMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appliance) GetTotalMemoryAvailableMiBOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalMemoryAvailableMiB) {
		return nil, false
	}
	return o.TotalMemoryAvailableMiB, true
}

// HasTotalMemoryAvailableMiB returns a boolean if a field has been set.
func (o *Appliance) HasTotalMemoryAvailableMiB() bool {
	if o != nil && !IsNil(o.TotalMemoryAvailableMiB) {
		return true
	}

	return false
}

// SetTotalMemoryAvailableMiB gets a reference to the given int32 and assigns it to the TotalMemoryAvailableMiB field.
func (o *Appliance) SetTotalMemoryAvailableMiB(v int32) {
	o.TotalMemoryAvailableMiB = &v
}

// GetTotalMemoryAllocatedMiB returns the TotalMemoryAllocatedMiB field value if set, zero value otherwise.
func (o *Appliance) GetTotalMemoryAllocatedMiB() int32 {
	if o == nil || IsNil(o.TotalMemoryAllocatedMiB) {
		var ret int32
		return ret
	}
	return *o.TotalMemoryAllocatedMiB
}

// GetTotalMemoryAllocatedMiBOk returns a tuple with the TotalMemoryAllocatedMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appliance) GetTotalMemoryAllocatedMiBOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalMemoryAllocatedMiB) {
		return nil, false
	}
	return o.TotalMemoryAllocatedMiB, true
}

// HasTotalMemoryAllocatedMiB returns a boolean if a field has been set.
func (o *Appliance) HasTotalMemoryAllocatedMiB() bool {
	if o != nil && !IsNil(o.TotalMemoryAllocatedMiB) {
		return true
	}

	return false
}

// SetTotalMemoryAllocatedMiB gets a reference to the given int32 and assigns it to the TotalMemoryAllocatedMiB field.
func (o *Appliance) SetTotalMemoryAllocatedMiB(v int32) {
	o.TotalMemoryAllocatedMiB = &v
}

func (o Appliance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Appliance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Blades) {
		toSerialize["blades"] = o.Blades
	}
	if !IsNil(o.TotalMemoryAvailableMiB) {
		toSerialize["totalMemoryAvailableMiB"] = o.TotalMemoryAvailableMiB
	}
	if !IsNil(o.TotalMemoryAllocatedMiB) {
		toSerialize["totalMemoryAllocatedMiB"] = o.TotalMemoryAllocatedMiB
	}
	return toSerialize, nil
}

type NullableAppliance struct {
	value *Appliance
	isSet bool
}

func (v NullableAppliance) Get() *Appliance {
	return v.value
}

func (v *NullableAppliance) Set(val *Appliance) {
	v.value = val
	v.isSet = true
}

func (v NullableAppliance) IsSet() bool {
	return v.isSet
}

func (v *NullableAppliance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppliance(val *Appliance) *NullableAppliance {
	return &NullableAppliance{value: val, isSet: true}
}

func (v NullableAppliance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppliance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
