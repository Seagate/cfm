/*
Composable Fabric Manager Service OpenAPI

This API allows users to interact through the CFM Service with CXL Hosts and Memory Appliances. The main purpose of this interface is to allow the retrieval of information and the creation and mapping of memory from a Memory Appliance to a CXL host.

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StatusMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusMessage{}

// StatusMessage struct for StatusMessage
type StatusMessage struct {
	// The URI of the http request
	Uri string `json:"uri"`
	// Additional information provided to the client regarding this response
	Details string               `json:"details"`
	Status  *StatusMessageStatus `json:"status,omitempty"`
}

// NewStatusMessage instantiates a new StatusMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusMessage(uri string, details string) *StatusMessage {
	this := StatusMessage{}
	this.Uri = uri
	this.Details = details
	return &this
}

// NewStatusMessageWithDefaults instantiates a new StatusMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusMessageWithDefaults() *StatusMessage {
	this := StatusMessage{}
	return &this
}

// GetUri returns the Uri field value
func (o *StatusMessage) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *StatusMessage) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *StatusMessage) SetUri(v string) {
	o.Uri = v
}

// GetDetails returns the Details field value
func (o *StatusMessage) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *StatusMessage) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *StatusMessage) SetDetails(v string) {
	o.Details = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StatusMessage) GetStatus() StatusMessageStatus {
	if o == nil || IsNil(o.Status) {
		var ret StatusMessageStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusMessage) GetStatusOk() (*StatusMessageStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StatusMessage) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusMessageStatus and assigns it to the Status field.
func (o *StatusMessage) SetStatus(v StatusMessageStatus) {
	o.Status = &v
}

func (o StatusMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["details"] = o.Details
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableStatusMessage struct {
	value *StatusMessage
	isSet bool
}

func (v NullableStatusMessage) Get() *StatusMessage {
	return v.value
}

func (v *NullableStatusMessage) Set(val *StatusMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusMessage(val *StatusMessage) *NullableStatusMessage {
	return &NullableStatusMessage{value: val, isSet: true}
}

func (v NullableStatusMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
