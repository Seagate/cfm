/*
Composable Fabric Manager Service OpenAPI

This API allows users to interact through the CFM Service with CXL Hosts and Memory Appliances. The main purpose of this interface is to allow the retrieval of information and the creation and mapping of memory from a Memory Appliance to a CXL host.

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the MemoryRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemoryRegion{}

// MemoryRegion struct for MemoryRegion
type MemoryRegion struct {
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	Id string `json:"id"`
	// A response string
	Status *string    `json:"status,omitempty"`
	Type   MemoryType `json:"type"`
	// A mebibyte equals 2**20 or 1,048,576 bytes.
	SizeMiB int32 `json:"sizeMiB"`
	// Memory bandwidth in the unit of GigaBytes per second
	Bandwidth *int32 `json:"bandwidth,omitempty"`
	// Memory latency in the unit of nanosecond
	Latency *int32 `json:"latency,omitempty"`
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	MemoryApplianceId *string `json:"memoryApplianceId,omitempty"`
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	MemoryBladeId *string `json:"memoryBladeId,omitempty"`
	// The CXL port name on the Memory Appliance
	MemoryAppliancePort *string `json:"memoryAppliancePort,omitempty"`
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	MappedHostId *string `json:"mappedHostId,omitempty"`
	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	MappedHostPort *string `json:"mappedHostPort,omitempty"`
}

// NewMemoryRegion instantiates a new MemoryRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryRegion(id string, type_ MemoryType, sizeMiB int32) *MemoryRegion {
	this := MemoryRegion{}
	this.Id = id
	this.Type = type_
	this.SizeMiB = sizeMiB
	return &this
}

// NewMemoryRegionWithDefaults instantiates a new MemoryRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryRegionWithDefaults() *MemoryRegion {
	this := MemoryRegion{}
	return &this
}

// GetId returns the Id field value
func (o *MemoryRegion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MemoryRegion) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MemoryRegion) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MemoryRegion) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MemoryRegion) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value
func (o *MemoryRegion) GetType() MemoryType {
	if o == nil {
		var ret MemoryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetTypeOk() (*MemoryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MemoryRegion) SetType(v MemoryType) {
	o.Type = v
}

// GetSizeMiB returns the SizeMiB field value
func (o *MemoryRegion) GetSizeMiB() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeMiB
}

// GetSizeMiBOk returns a tuple with the SizeMiB field value
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetSizeMiBOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeMiB, true
}

// SetSizeMiB sets field value
func (o *MemoryRegion) SetSizeMiB(v int32) {
	o.SizeMiB = v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *MemoryRegion) GetBandwidth() int32 {
	if o == nil || IsNil(o.Bandwidth) {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *MemoryRegion) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *MemoryRegion) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *MemoryRegion) GetLatency() int32 {
	if o == nil || IsNil(o.Latency) {
		var ret int32
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetLatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *MemoryRegion) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given int32 and assigns it to the Latency field.
func (o *MemoryRegion) SetLatency(v int32) {
	o.Latency = &v
}

// GetMemoryApplianceId returns the MemoryApplianceId field value if set, zero value otherwise.
func (o *MemoryRegion) GetMemoryApplianceId() string {
	if o == nil || IsNil(o.MemoryApplianceId) {
		var ret string
		return ret
	}
	return *o.MemoryApplianceId
}

// GetMemoryApplianceIdOk returns a tuple with the MemoryApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetMemoryApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.MemoryApplianceId) {
		return nil, false
	}
	return o.MemoryApplianceId, true
}

// HasMemoryApplianceId returns a boolean if a field has been set.
func (o *MemoryRegion) HasMemoryApplianceId() bool {
	if o != nil && !IsNil(o.MemoryApplianceId) {
		return true
	}

	return false
}

// SetMemoryApplianceId gets a reference to the given string and assigns it to the MemoryApplianceId field.
func (o *MemoryRegion) SetMemoryApplianceId(v string) {
	o.MemoryApplianceId = &v
}

// GetMemoryBladeId returns the MemoryBladeId field value if set, zero value otherwise.
func (o *MemoryRegion) GetMemoryBladeId() string {
	if o == nil || IsNil(o.MemoryBladeId) {
		var ret string
		return ret
	}
	return *o.MemoryBladeId
}

// GetMemoryBladeIdOk returns a tuple with the MemoryBladeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetMemoryBladeIdOk() (*string, bool) {
	if o == nil || IsNil(o.MemoryBladeId) {
		return nil, false
	}
	return o.MemoryBladeId, true
}

// HasMemoryBladeId returns a boolean if a field has been set.
func (o *MemoryRegion) HasMemoryBladeId() bool {
	if o != nil && !IsNil(o.MemoryBladeId) {
		return true
	}

	return false
}

// SetMemoryBladeId gets a reference to the given string and assigns it to the MemoryBladeId field.
func (o *MemoryRegion) SetMemoryBladeId(v string) {
	o.MemoryBladeId = &v
}

// GetMemoryAppliancePort returns the MemoryAppliancePort field value if set, zero value otherwise.
func (o *MemoryRegion) GetMemoryAppliancePort() string {
	if o == nil || IsNil(o.MemoryAppliancePort) {
		var ret string
		return ret
	}
	return *o.MemoryAppliancePort
}

// GetMemoryAppliancePortOk returns a tuple with the MemoryAppliancePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetMemoryAppliancePortOk() (*string, bool) {
	if o == nil || IsNil(o.MemoryAppliancePort) {
		return nil, false
	}
	return o.MemoryAppliancePort, true
}

// HasMemoryAppliancePort returns a boolean if a field has been set.
func (o *MemoryRegion) HasMemoryAppliancePort() bool {
	if o != nil && !IsNil(o.MemoryAppliancePort) {
		return true
	}

	return false
}

// SetMemoryAppliancePort gets a reference to the given string and assigns it to the MemoryAppliancePort field.
func (o *MemoryRegion) SetMemoryAppliancePort(v string) {
	o.MemoryAppliancePort = &v
}

// GetMappedHostId returns the MappedHostId field value if set, zero value otherwise.
func (o *MemoryRegion) GetMappedHostId() string {
	if o == nil || IsNil(o.MappedHostId) {
		var ret string
		return ret
	}
	return *o.MappedHostId
}

// GetMappedHostIdOk returns a tuple with the MappedHostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetMappedHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.MappedHostId) {
		return nil, false
	}
	return o.MappedHostId, true
}

// HasMappedHostId returns a boolean if a field has been set.
func (o *MemoryRegion) HasMappedHostId() bool {
	if o != nil && !IsNil(o.MappedHostId) {
		return true
	}

	return false
}

// SetMappedHostId gets a reference to the given string and assigns it to the MappedHostId field.
func (o *MemoryRegion) SetMappedHostId(v string) {
	o.MappedHostId = &v
}

// GetMappedHostPort returns the MappedHostPort field value if set, zero value otherwise.
func (o *MemoryRegion) GetMappedHostPort() string {
	if o == nil || IsNil(o.MappedHostPort) {
		var ret string
		return ret
	}
	return *o.MappedHostPort
}

// GetMappedHostPortOk returns a tuple with the MappedHostPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryRegion) GetMappedHostPortOk() (*string, bool) {
	if o == nil || IsNil(o.MappedHostPort) {
		return nil, false
	}
	return o.MappedHostPort, true
}

// HasMappedHostPort returns a boolean if a field has been set.
func (o *MemoryRegion) HasMappedHostPort() bool {
	if o != nil && !IsNil(o.MappedHostPort) {
		return true
	}

	return false
}

// SetMappedHostPort gets a reference to the given string and assigns it to the MappedHostPort field.
func (o *MemoryRegion) SetMappedHostPort(v string) {
	o.MappedHostPort = &v
}

func (o MemoryRegion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemoryRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["type"] = o.Type
	toSerialize["sizeMiB"] = o.SizeMiB
	if !IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.MemoryApplianceId) {
		toSerialize["memoryApplianceId"] = o.MemoryApplianceId
	}
	if !IsNil(o.MemoryBladeId) {
		toSerialize["memoryBladeId"] = o.MemoryBladeId
	}
	if !IsNil(o.MemoryAppliancePort) {
		toSerialize["memoryAppliancePort"] = o.MemoryAppliancePort
	}
	if !IsNil(o.MappedHostId) {
		toSerialize["mappedHostId"] = o.MappedHostId
	}
	if !IsNil(o.MappedHostPort) {
		toSerialize["mappedHostPort"] = o.MappedHostPort
	}
	return toSerialize, nil
}

type NullableMemoryRegion struct {
	value *MemoryRegion
	isSet bool
}

func (v NullableMemoryRegion) Get() *MemoryRegion {
	return v.value
}

func (v *NullableMemoryRegion) Set(val *MemoryRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryRegion(val *MemoryRegion) *NullableMemoryRegion {
	return &NullableMemoryRegion{value: val, isSet: true}
}

func (v NullableMemoryRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
