/*
Composer and Fabric Manager Service OpenAPI

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	openapiclient "cfm/pkg/client"

	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_client_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService AppliancesDeleteById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string

		resp, httpRes, err := apiClient.DefaultAPI.AppliancesDeleteById(context.Background(), applianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AppliancesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AppliancesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AppliancesGetById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string

		resp, httpRes, err := apiClient.DefaultAPI.AppliancesGetById(context.Background(), applianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AppliancesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AppliancesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesAssignMemoryById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string
		var memoryId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesAssignMemoryById(context.Background(), applianceId, bladeId, memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesComposeMemory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesComposeMemory(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesComposeMemoryByResource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesComposeMemoryByResource(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesDeleteById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesDeleteById(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesFreeMemoryById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string
		var memoryId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesFreeMemoryById(context.Background(), applianceId, bladeId, memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGet(context.Background(), applianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetById(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetMemory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetMemory(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetMemoryById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string
		var memoryId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetMemoryById(context.Background(), applianceId, bladeId, memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetPortById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string
		var portId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetPortById(context.Background(), applianceId, bladeId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetPorts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetPorts(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetResourceById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string
		var resourceId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetResourceById(context.Background(), applianceId, bladeId, resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesGetResources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string
		var bladeId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesGetResources(context.Background(), applianceId, bladeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BladesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applianceId string

		resp, httpRes, err := apiClient.DefaultAPI.BladesPost(context.Background(), applianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CfmGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CfmGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CfmV1Get", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CfmV1Get(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostGetMemory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.DefaultAPI.HostGetMemory(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsComposeMemory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsComposeMemory(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsDeleteById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsDeleteById(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsFreeMemoryById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string
		var memoryId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsFreeMemoryById(context.Background(), hostId, memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.HostsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGetById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsGetById(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGetMemoryById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string
		var memoryId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsGetMemoryById(context.Background(), hostId, memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGetMemoryDeviceById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string
		var memoryDeviceId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsGetMemoryDeviceById(context.Background(), hostId, memoryDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGetMemoryDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsGetMemoryDevices(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGetPortById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string
		var portId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsGetPortById(context.Background(), hostId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsGetPorts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.DefaultAPI.HostsGetPorts(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HostsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.HostsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RootGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.RootGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
