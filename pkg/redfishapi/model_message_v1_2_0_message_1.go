/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package redfishapi

// MessageV120Message1 - The message that the Redfish service returns.
type MessageV120Message1 struct {

	// The human-readable message.
	Message string `json:"Message,omitempty"`

	// An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs []string `json:"MessageArgs,omitempty"`

	// The identifier for the message.
	MessageId string `json:"MessageId"`

	MessageSeverity ResourceHealth `json:"MessageSeverity,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// A set of properties described by the message.
	RelatedProperties []string `json:"RelatedProperties,omitempty"`

	// Used to provide suggestions on how to resolve the situation that caused the message.
	Resolution string `json:"Resolution,omitempty"`

	// The list of recommended steps to resolve the situation that caused the message.
	ResolutionSteps []ResolutionStepResolutionStep `json:"ResolutionSteps,omitempty"`

	// The severity of the message.
	// Deprecated
	Severity string `json:"Severity,omitempty"`
}

// AssertMessageV120Message1Required checks if the required fields are not zero-ed
func AssertMessageV120Message1Required(obj MessageV120Message1) error {
	elements := map[string]interface{}{
		"MessageId": obj.MessageId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.ResolutionSteps {
		if err := AssertResolutionStepResolutionStepRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertMessageV120Message1Constraints checks if the values respects the defined constraints
func AssertMessageV120Message1Constraints(obj MessageV120Message1) error {
	return nil
}
