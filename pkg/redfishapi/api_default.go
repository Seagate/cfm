/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package redfishapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service      DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"RedfishGet": Route{
			strings.ToUpper("Get"),
			"/redfish",
			c.RedfishGet,
		},
		"RedfishV1AccountServiceAccountsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Accounts",
			c.RedfishV1AccountServiceAccountsGet,
		},
		"RedfishV1AccountServiceAccountsManagerAccountIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdDelete,
		},
		"RedfishV1AccountServiceAccountsManagerAccountIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdGet,
		},
		"RedfishV1AccountServiceAccountsManagerAccountIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdPatch,
		},
		"RedfishV1AccountServiceAccountsManagerAccountIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdPut,
		},
		"RedfishV1AccountServiceAccountsPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/Accounts",
			c.RedfishV1AccountServiceAccountsPost,
		},
		"RedfishV1AccountServiceGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService",
			c.RedfishV1AccountServiceGet,
		},
		"RedfishV1AccountServicePatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService",
			c.RedfishV1AccountServicePatch,
		},
		"RedfishV1AccountServicePut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService",
			c.RedfishV1AccountServicePut,
		},
		"RedfishV1AccountServiceRolesGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Roles",
			c.RedfishV1AccountServiceRolesGet,
		},
		"RedfishV1AccountServiceRolesPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/Roles",
			c.RedfishV1AccountServiceRolesPost,
		},
		"RedfishV1AccountServiceRolesRoleIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdDelete,
		},
		"RedfishV1AccountServiceRolesRoleIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdGet,
		},
		"RedfishV1AccountServiceRolesRoleIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdPatch,
		},
		"RedfishV1AccountServiceRolesRoleIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdPut,
		},
		"RedfishV1ChassisChassisIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}",
			c.RedfishV1ChassisChassisIdGet,
		},
		"RedfishV1ChassisChassisIdMemoryDomainsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains",
			c.RedfishV1ChassisChassisIdMemoryDomainsGet,
		},
		"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet,
		},
		"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet,
		},
		"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet,
		},
		"RedfishV1ChassisChassisIdMemoryGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Memory",
			c.RedfishV1ChassisChassisIdMemoryGet,
		},
		"RedfishV1ChassisChassisIdMemoryMemoryIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdGet,
		},
		"RedfishV1ChassisChassisIdPCIeDevicesGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices",
			c.RedfishV1ChassisChassisIdPCIeDevicesGet,
		},
		"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesCXLLogicalDeviceIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/CXLLogicalDevices/{CXLLogicalDeviceId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesCXLLogicalDeviceIdGet,
		},
		"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/CXLLogicalDevices",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesGet,
		},
		"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet,
		},
		"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet,
		},
		"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions/{PCIeFunctionId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet,
		},
		"RedfishV1ChassisGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis",
			c.RedfishV1ChassisGet,
		},
		"RedfishV1FabricsFabricIdConnectionsConnectionIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Connections/{ConnectionId}",
			c.RedfishV1FabricsFabricIdConnectionsConnectionIdDelete,
		},
		"RedfishV1FabricsFabricIdConnectionsConnectionIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Connections/{ConnectionId}",
			c.RedfishV1FabricsFabricIdConnectionsConnectionIdGet,
		},
		"RedfishV1FabricsFabricIdConnectionsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Connections",
			c.RedfishV1FabricsFabricIdConnectionsGet,
		},
		"RedfishV1FabricsFabricIdConnectionsPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Connections",
			c.RedfishV1FabricsFabricIdConnectionsPost,
		},
		"RedfishV1FabricsFabricIdEndpointsEndpointIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints/{EndpointId}",
			c.RedfishV1FabricsFabricIdEndpointsEndpointIdGet,
		},
		"RedfishV1FabricsFabricIdEndpointsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints",
			c.RedfishV1FabricsFabricIdEndpointsGet,
		},
		"RedfishV1FabricsFabricIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}",
			c.RedfishV1FabricsFabricIdGet,
		},
		"RedfishV1FabricsFabricIdSwitchesGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches",
			c.RedfishV1FabricsFabricIdSwitchesGet,
		},
		"RedfishV1FabricsFabricIdSwitchesSwitchIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdGet,
		},
		"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet,
		},
		"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet,
		},
		"RedfishV1FabricsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics",
			c.RedfishV1FabricsGet,
		},
		"RedfishV1Get": Route{
			strings.ToUpper("Get"),
			"/redfish/v1",
			c.RedfishV1Get,
		},
		"RedfishV1MetadataGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/$metadata",
			c.RedfishV1MetadataGet,
		},
		"RedfishV1OdataGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/odata",
			c.RedfishV1OdataGet,
		},
		"RedfishV1SessionServiceGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServiceGet,
		},
		"RedfishV1SessionServicePatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServicePatch,
		},
		"RedfishV1SessionServicePut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServicePut,
		},
		"RedfishV1SessionServiceSessionsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService/Sessions",
			c.RedfishV1SessionServiceSessionsGet,
		},
		"RedfishV1SessionServiceSessionsPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/SessionService/Sessions",
			c.RedfishV1SessionServiceSessionsPost,
		},
		"RedfishV1SessionServiceSessionsSessionIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/SessionService/Sessions/{SessionId}",
			c.RedfishV1SessionServiceSessionsSessionIdDelete,
		},
		"RedfishV1SessionServiceSessionsSessionIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService/Sessions/{SessionId}",
			c.RedfishV1SessionServiceSessionsSessionIdGet,
		},
		"RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost,
		},
		"RedfishV1SystemsComputerSystemIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdGet,
		},
		"RedfishV1SystemsComputerSystemIdMemoryDomainsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsGet,
		},
		"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet,
		},
		"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet,
		},
		"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete,
		},
		"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet,
		},
		"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost,
		},
		"RedfishV1SystemsComputerSystemIdMemoryGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory",
			c.RedfishV1SystemsComputerSystemIdMemoryGet,
		},
		"RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet,
		},
		"RedfishV1SystemsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems",
			c.RedfishV1SystemsGet,
		},
	}
}

// RedfishGet -
func (c *DefaultAPIController) RedfishGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceAccountsGet -
func (c *DefaultAPIController) RedfishV1AccountServiceAccountsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceAccountsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdDelete -
func (c *DefaultAPIController) RedfishV1AccountServiceAccountsManagerAccountIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountIdParam := params["ManagerAccountId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdDelete(r.Context(), managerAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdGet -
func (c *DefaultAPIController) RedfishV1AccountServiceAccountsManagerAccountIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountIdParam := params["ManagerAccountId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdGet(r.Context(), managerAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdPatch -
func (c *DefaultAPIController) RedfishV1AccountServiceAccountsManagerAccountIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountIdParam := params["ManagerAccountId"]
	managerAccountV1120ManagerAccountParam := ManagerAccountV1120ManagerAccount{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertManagerAccountV1120ManagerAccountRequired(managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertManagerAccountV1120ManagerAccountConstraints(managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdPatch(r.Context(), managerAccountIdParam, managerAccountV1120ManagerAccountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdPut -
func (c *DefaultAPIController) RedfishV1AccountServiceAccountsManagerAccountIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountIdParam := params["ManagerAccountId"]
	managerAccountV1120ManagerAccountParam := ManagerAccountV1120ManagerAccount{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertManagerAccountV1120ManagerAccountRequired(managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertManagerAccountV1120ManagerAccountConstraints(managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdPut(r.Context(), managerAccountIdParam, managerAccountV1120ManagerAccountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceAccountsPost -
func (c *DefaultAPIController) RedfishV1AccountServiceAccountsPost(w http.ResponseWriter, r *http.Request) {
	managerAccountV1120ManagerAccountParam := ManagerAccountV1120ManagerAccount{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertManagerAccountV1120ManagerAccountRequired(managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertManagerAccountV1120ManagerAccountConstraints(managerAccountV1120ManagerAccountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServiceAccountsPost(r.Context(), managerAccountV1120ManagerAccountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceGet -
func (c *DefaultAPIController) RedfishV1AccountServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServicePatch -
func (c *DefaultAPIController) RedfishV1AccountServicePatch(w http.ResponseWriter, r *http.Request) {
	accountServiceV1150AccountServiceParam := AccountServiceV1150AccountService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountServiceV1150AccountServiceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountServiceV1150AccountServiceRequired(accountServiceV1150AccountServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAccountServiceV1150AccountServiceConstraints(accountServiceV1150AccountServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServicePatch(r.Context(), accountServiceV1150AccountServiceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServicePut -
func (c *DefaultAPIController) RedfishV1AccountServicePut(w http.ResponseWriter, r *http.Request) {
	accountServiceV1150AccountServiceParam := AccountServiceV1150AccountService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountServiceV1150AccountServiceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountServiceV1150AccountServiceRequired(accountServiceV1150AccountServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAccountServiceV1150AccountServiceConstraints(accountServiceV1150AccountServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServicePut(r.Context(), accountServiceV1150AccountServiceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceRolesGet -
func (c *DefaultAPIController) RedfishV1AccountServiceRolesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceRolesGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceRolesPost -
func (c *DefaultAPIController) RedfishV1AccountServiceRolesPost(w http.ResponseWriter, r *http.Request) {
	roleV131RoleParam := RoleV131Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleV131RoleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleV131RoleRequired(roleV131RoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleV131RoleConstraints(roleV131RoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServiceRolesPost(r.Context(), roleV131RoleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceRolesRoleIdDelete -
func (c *DefaultAPIController) RedfishV1AccountServiceRolesRoleIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleIdParam := params["RoleId"]
	result, err := c.service.RedfishV1AccountServiceRolesRoleIdDelete(r.Context(), roleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceRolesRoleIdGet -
func (c *DefaultAPIController) RedfishV1AccountServiceRolesRoleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleIdParam := params["RoleId"]
	result, err := c.service.RedfishV1AccountServiceRolesRoleIdGet(r.Context(), roleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceRolesRoleIdPatch -
func (c *DefaultAPIController) RedfishV1AccountServiceRolesRoleIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleIdParam := params["RoleId"]
	roleV131RoleParam := RoleV131Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleV131RoleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleV131RoleRequired(roleV131RoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleV131RoleConstraints(roleV131RoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServiceRolesRoleIdPatch(r.Context(), roleIdParam, roleV131RoleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1AccountServiceRolesRoleIdPut -
func (c *DefaultAPIController) RedfishV1AccountServiceRolesRoleIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleIdParam := params["RoleId"]
	roleV131RoleParam := RoleV131Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleV131RoleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleV131RoleRequired(roleV131RoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleV131RoleConstraints(roleV131RoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1AccountServiceRolesRoleIdPut(r.Context(), roleIdParam, roleV131RoleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdGet(r.Context(), chassisIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdMemoryDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsGet(r.Context(), chassisIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet(r.Context(), chassisIdParam, memoryDomainIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet(r.Context(), chassisIdParam, memoryDomainIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	memoryChunksIdParam := params["MemoryChunksId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(r.Context(), chassisIdParam, memoryDomainIdParam, memoryChunksIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdMemoryGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdMemoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryGet(r.Context(), chassisIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	memoryIdParam := params["MemoryId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdGet(r.Context(), chassisIdParam, memoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdPCIeDevicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesGet(r.Context(), chassisIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesCXLLogicalDeviceIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesCXLLogicalDeviceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	pCIeDeviceIdParam := params["PCIeDeviceId"]
	cXLLogicalDeviceIdParam := params["CXLLogicalDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesCXLLogicalDeviceIdGet(r.Context(), chassisIdParam, pCIeDeviceIdParam, cXLLogicalDeviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	pCIeDeviceIdParam := params["PCIeDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdCXLLogicalDevicesGet(r.Context(), chassisIdParam, pCIeDeviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	pCIeDeviceIdParam := params["PCIeDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet(r.Context(), chassisIdParam, pCIeDeviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	pCIeDeviceIdParam := params["PCIeDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(r.Context(), chassisIdParam, pCIeDeviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet -
func (c *DefaultAPIController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisIdParam := params["ChassisId"]
	pCIeDeviceIdParam := params["PCIeDeviceId"]
	pCIeFunctionIdParam := params["PCIeFunctionId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(r.Context(), chassisIdParam, pCIeDeviceIdParam, pCIeFunctionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ChassisGet -
func (c *DefaultAPIController) RedfishV1ChassisGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1ChassisGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdConnectionsConnectionIdDelete -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdConnectionsConnectionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	connectionIdParam := params["ConnectionId"]
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsConnectionIdDelete(r.Context(), fabricIdParam, connectionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdConnectionsConnectionIdGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdConnectionsConnectionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	connectionIdParam := params["ConnectionId"]
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsConnectionIdGet(r.Context(), fabricIdParam, connectionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdConnectionsGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdConnectionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsGet(r.Context(), fabricIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdConnectionsPost -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdConnectionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	connectionV131ConnectionParam := ConnectionV131Connection{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionV131ConnectionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionV131ConnectionRequired(connectionV131ConnectionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConnectionV131ConnectionConstraints(connectionV131ConnectionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsPost(r.Context(), fabricIdParam, connectionV131ConnectionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdEndpointsEndpointIdGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdEndpointsEndpointIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	endpointIdParam := params["EndpointId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointsEndpointIdGet(r.Context(), fabricIdParam, endpointIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdEndpointsGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdEndpointsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointsGet(r.Context(), fabricIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdGet(r.Context(), fabricIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdSwitchesGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdSwitchesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesGet(r.Context(), fabricIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdSwitchesSwitchIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	switchIdParam := params["SwitchId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdGet(r.Context(), fabricIdParam, switchIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	switchIdParam := params["SwitchId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet(r.Context(), fabricIdParam, switchIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet -
func (c *DefaultAPIController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricIdParam := params["FabricId"]
	switchIdParam := params["SwitchId"]
	portIdParam := params["PortId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet(r.Context(), fabricIdParam, switchIdParam, portIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1FabricsGet -
func (c *DefaultAPIController) RedfishV1FabricsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1FabricsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1Get -
func (c *DefaultAPIController) RedfishV1Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1MetadataGet -
func (c *DefaultAPIController) RedfishV1MetadataGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1MetadataGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code

	/* ATTENTION:
	Openapi-generator doesn't support xml response in go server.
	The following changes are required for proper xml response.
	Do not overwrite when generating new redfish interface.
	*/
	w.Header().Set("Content-Type", "application/xml; charset=UTF-8")
	if &result.Code != nil {
		w.WriteHeader(result.Code)
	} else {
		w.WriteHeader(http.StatusOK)
	}

	if result.Body != nil {
		w.Write([]byte(result.Body.(string)))
	}
}

// RedfishV1OdataGet -
func (c *DefaultAPIController) RedfishV1OdataGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1OdataGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceGet -
func (c *DefaultAPIController) RedfishV1SessionServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SessionServiceGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServicePatch -
func (c *DefaultAPIController) RedfishV1SessionServicePatch(w http.ResponseWriter, r *http.Request) {
	sessionServiceV118SessionServiceParam := SessionServiceV118SessionService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionServiceV118SessionServiceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionServiceV118SessionServiceRequired(sessionServiceV118SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSessionServiceV118SessionServiceConstraints(sessionServiceV118SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServicePatch(r.Context(), sessionServiceV118SessionServiceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServicePut -
func (c *DefaultAPIController) RedfishV1SessionServicePut(w http.ResponseWriter, r *http.Request) {
	sessionServiceV118SessionServiceParam := SessionServiceV118SessionService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionServiceV118SessionServiceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionServiceV118SessionServiceRequired(sessionServiceV118SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSessionServiceV118SessionServiceConstraints(sessionServiceV118SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServicePut(r.Context(), sessionServiceV118SessionServiceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsGet -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SessionServiceSessionsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsPost -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsPost(w http.ResponseWriter, r *http.Request) {
	sessionV171SessionParam := SessionV171Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionV171SessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionV171SessionRequired(sessionV171SessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSessionV171SessionConstraints(sessionV171SessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServiceSessionsPost(r.Context(), sessionV171SessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsSessionIdDelete -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsSessionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["SessionId"]
	result, err := c.service.RedfishV1SessionServiceSessionsSessionIdDelete(r.Context(), sessionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsSessionIdGet -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsSessionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["SessionId"]
	result, err := c.service.RedfishV1SessionServiceSessionsSessionIdGet(r.Context(), sessionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	computerSystemV1220ResetRequestBodyParam := ComputerSystemV1220ResetRequestBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&computerSystemV1220ResetRequestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComputerSystemV1220ResetRequestBodyRequired(computerSystemV1220ResetRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComputerSystemV1220ResetRequestBodyConstraints(computerSystemV1220ResetRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(r.Context(), computerSystemIdParam, computerSystemV1220ResetRequestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdGet(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsGet(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(r.Context(), computerSystemIdParam, memoryDomainIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(r.Context(), computerSystemIdParam, memoryDomainIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	memoryChunksIdParam := params["MemoryChunksId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(r.Context(), computerSystemIdParam, memoryDomainIdParam, memoryChunksIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	memoryChunksIdParam := params["MemoryChunksId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(r.Context(), computerSystemIdParam, memoryDomainIdParam, memoryChunksIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	memoryDomainIdParam := params["MemoryDomainId"]
	memoryChunksV161MemoryChunksParam := MemoryChunksV161MemoryChunks{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&memoryChunksV161MemoryChunksParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMemoryChunksV161MemoryChunksRequired(memoryChunksV161MemoryChunksParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMemoryChunksV161MemoryChunksConstraints(memoryChunksV161MemoryChunksParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(r.Context(), computerSystemIdParam, memoryDomainIdParam, memoryChunksV161MemoryChunksParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryGet(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	memoryIdParam := params["MemoryId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet(r.Context(), computerSystemIdParam, memoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsGet -
func (c *DefaultAPIController) RedfishV1SystemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SystemsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
