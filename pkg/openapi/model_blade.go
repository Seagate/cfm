/*
 * Composable Fabric Manager Service OpenAPI
 *
 * This API allows users to interact through the CFM Service with CXL Hosts and Memory Appliances. The main purpose of this interface is to allow the retrieval of information and the creation and mapping of memory from a Memory Appliance to a CXL host.
 *
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"errors"
)

type Blade struct {

	// The id uniquely identifies the resource within a resource collection. Since URIs are constructed with ids, must not contain RFC1738 unsafe characters.
	Id string `json:"id"`

	// The IP Address in dot notation of the service
	IpAddress string `json:"ipAddress"`

	Port int32 `json:"port"`

	// A response string
	Status string `json:"status,omitempty"`

	Ports MemberItem `json:"ports,omitempty"`

	Resources MemberItem `json:"resources,omitempty"`

	Memory MemberItem `json:"memory,omitempty"`

	// A mebibyte equals 2**20 or 1,048,576 bytes.
	TotalMemoryAvailableMiB int32 `json:"totalMemoryAvailableMiB,omitempty"`

	// A mebibyte equals 2**20 or 1,048,576 bytes.
	TotalMemoryAllocatedMiB int32 `json:"totalMemoryAllocatedMiB,omitempty"`
}

// AssertBladeRequired checks if the required fields are not zero-ed
func AssertBladeRequired(obj Blade) error {
	elements := map[string]interface{}{
		"id":        obj.Id,
		"ipAddress": obj.IpAddress,
		"port":      obj.Port,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMemberItemRequired(obj.Ports); err != nil {
		return err
	}
	if err := AssertMemberItemRequired(obj.Resources); err != nil {
		return err
	}
	if err := AssertMemberItemRequired(obj.Memory); err != nil {
		return err
	}
	return nil
}

// AssertBladeConstraints checks if the values respects the defined constraints
func AssertBladeConstraints(obj Blade) error {
	if obj.Port < 80 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Port > 65535 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.TotalMemoryAvailableMiB < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TotalMemoryAllocatedMiB < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
