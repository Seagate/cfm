/*
 * Composable Fabric Manager Service OpenAPI
 *
 * This API allows users to interact through the CFM Service with CXL Hosts and Memory Appliances. The main purpose of this interface is to allow the retrieval of information and the creation and mapping of memory from a Memory Appliance to a CXL host.
 *
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service      DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"AppliancesDeleteById": Route{
			strings.ToUpper("Delete"),
			"/cfm/v1/appliances/{applianceId}",
			c.AppliancesDeleteById,
		},
		"AppliancesGet": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances",
			c.AppliancesGet,
		},
		"AppliancesGetById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}",
			c.AppliancesGetById,
		},
		"AppliancesPost": Route{
			strings.ToUpper("Post"),
			"/cfm/v1/appliances",
			c.AppliancesPost,
		},
		"AppliancesResyncById": Route{
			strings.ToUpper("Patch"),
			"/cfm/v1/appliances/{applianceId}",
			c.AppliancesResyncById,
		},
		"BladesAssignMemoryById": Route{
			strings.ToUpper("Patch"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/memory/{memoryId}",
			c.BladesAssignMemoryById,
		},
		"BladesComposeMemory": Route{
			strings.ToUpper("Post"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/memory",
			c.BladesComposeMemory,
		},
		"BladesComposeMemoryByResource": Route{
			strings.ToUpper("Put"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/memory",
			c.BladesComposeMemoryByResource,
		},
		"BladesDeleteById": Route{
			strings.ToUpper("Delete"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}",
			c.BladesDeleteById,
		},
		"BladesFreeMemoryById": Route{
			strings.ToUpper("Delete"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/memory/{memoryId}",
			c.BladesFreeMemoryById,
		},
		"BladesGet": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades",
			c.BladesGet,
		},
		"BladesGetById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}",
			c.BladesGetById,
		},
		"BladesGetMemory": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/memory",
			c.BladesGetMemory,
		},
		"BladesGetMemoryById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/memory/{memoryId}",
			c.BladesGetMemoryById,
		},
		"BladesGetPortById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/ports/{portId}",
			c.BladesGetPortById,
		},
		"BladesGetPorts": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/ports",
			c.BladesGetPorts,
		},
		"BladesGetResourceById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/resources/{resourceId}",
			c.BladesGetResourceById,
		},
		"BladesGetResources": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}/resources",
			c.BladesGetResources,
		},
		"BladesPost": Route{
			strings.ToUpper("Post"),
			"/cfm/v1/appliances/{applianceId}/blades",
			c.BladesPost,
		},
		"BladesResyncById": Route{
			strings.ToUpper("Patch"),
			"/cfm/v1/appliances/{applianceId}/blades/{bladeId}",
			c.BladesResyncById,
		},
		"CfmGet": Route{
			strings.ToUpper("Get"),
			"/cfm",
			c.CfmGet,
		},
		"CfmV1Get": Route{
			strings.ToUpper("Get"),
			"/cfm/v1",
			c.CfmV1Get,
		},
		"HostGetMemory": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}/memory",
			c.HostGetMemory,
		},
		"HostsComposeMemory": Route{
			strings.ToUpper("Post"),
			"/cfm/v1/hosts/{hostId}/memory",
			c.HostsComposeMemory,
		},
		"HostsDeleteById": Route{
			strings.ToUpper("Delete"),
			"/cfm/v1/hosts/{hostId}",
			c.HostsDeleteById,
		},
		"HostsFreeMemoryById": Route{
			strings.ToUpper("Delete"),
			"/cfm/v1/hosts/{hostId}/memory/{memoryId}",
			c.HostsFreeMemoryById,
		},
		"HostsGet": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts",
			c.HostsGet,
		},
		"HostsGetById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}",
			c.HostsGetById,
		},
		"HostsGetMemoryById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}/memory/{memoryId}",
			c.HostsGetMemoryById,
		},
		"HostsGetMemoryDeviceById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}/memory-devices/{memoryDeviceId}",
			c.HostsGetMemoryDeviceById,
		},
		"HostsGetMemoryDevices": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}/memory-devices",
			c.HostsGetMemoryDevices,
		},
		"HostsGetPortById": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}/ports/{portId}",
			c.HostsGetPortById,
		},
		"HostsGetPorts": Route{
			strings.ToUpper("Get"),
			"/cfm/v1/hosts/{hostId}/ports",
			c.HostsGetPorts,
		},
		"HostsPost": Route{
			strings.ToUpper("Post"),
			"/cfm/v1/hosts",
			c.HostsPost,
		},
		"HostsResyncById": Route{
			strings.ToUpper("Patch"),
			"/cfm/v1/hosts/{hostId}",
			c.HostsResyncById,
		},
		"RootGet": Route{
			strings.ToUpper("Get"),
			"/",
			c.RootGet,
		},
	}
}

// AppliancesDeleteById -
func (c *DefaultAPIController) AppliancesDeleteById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	result, err := c.service.AppliancesDeleteById(r.Context(), applianceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppliancesGet -
func (c *DefaultAPIController) AppliancesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AppliancesGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppliancesGetById -
func (c *DefaultAPIController) AppliancesGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	result, err := c.service.AppliancesGetById(r.Context(), applianceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppliancesPost -
func (c *DefaultAPIController) AppliancesPost(w http.ResponseWriter, r *http.Request) {
	credentialsParam := Credentials{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&credentialsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCredentialsRequired(credentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCredentialsConstraints(credentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppliancesPost(r.Context(), credentialsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppliancesResyncById -
func (c *DefaultAPIController) AppliancesResyncById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	result, err := c.service.AppliancesResyncById(r.Context(), applianceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesAssignMemoryById -
func (c *DefaultAPIController) BladesAssignMemoryById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	memoryIdParam := params["memoryId"]
	assignMemoryRequestParam := AssignMemoryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&assignMemoryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAssignMemoryRequestRequired(assignMemoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAssignMemoryRequestConstraints(assignMemoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BladesAssignMemoryById(r.Context(), applianceIdParam, bladeIdParam, memoryIdParam, assignMemoryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesComposeMemory -
func (c *DefaultAPIController) BladesComposeMemory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	composeMemoryRequestParam := ComposeMemoryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&composeMemoryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComposeMemoryRequestRequired(composeMemoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComposeMemoryRequestConstraints(composeMemoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BladesComposeMemory(r.Context(), applianceIdParam, bladeIdParam, composeMemoryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesComposeMemoryByResource -
func (c *DefaultAPIController) BladesComposeMemoryByResource(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	composeMemoryByResourceRequestParam := ComposeMemoryByResourceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&composeMemoryByResourceRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComposeMemoryByResourceRequestRequired(composeMemoryByResourceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComposeMemoryByResourceRequestConstraints(composeMemoryByResourceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BladesComposeMemoryByResource(r.Context(), applianceIdParam, bladeIdParam, composeMemoryByResourceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesDeleteById -
func (c *DefaultAPIController) BladesDeleteById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	result, err := c.service.BladesDeleteById(r.Context(), applianceIdParam, bladeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesFreeMemoryById -
func (c *DefaultAPIController) BladesFreeMemoryById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	memoryIdParam := params["memoryId"]
	result, err := c.service.BladesFreeMemoryById(r.Context(), applianceIdParam, bladeIdParam, memoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGet -
func (c *DefaultAPIController) BladesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	result, err := c.service.BladesGet(r.Context(), applianceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetById -
func (c *DefaultAPIController) BladesGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	result, err := c.service.BladesGetById(r.Context(), applianceIdParam, bladeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetMemory -
func (c *DefaultAPIController) BladesGetMemory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	result, err := c.service.BladesGetMemory(r.Context(), applianceIdParam, bladeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetMemoryById -
func (c *DefaultAPIController) BladesGetMemoryById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	memoryIdParam := params["memoryId"]
	result, err := c.service.BladesGetMemoryById(r.Context(), applianceIdParam, bladeIdParam, memoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetPortById -
func (c *DefaultAPIController) BladesGetPortById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	portIdParam := params["portId"]
	result, err := c.service.BladesGetPortById(r.Context(), applianceIdParam, bladeIdParam, portIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetPorts -
func (c *DefaultAPIController) BladesGetPorts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	result, err := c.service.BladesGetPorts(r.Context(), applianceIdParam, bladeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetResourceById -
func (c *DefaultAPIController) BladesGetResourceById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	resourceIdParam := params["resourceId"]
	result, err := c.service.BladesGetResourceById(r.Context(), applianceIdParam, bladeIdParam, resourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesGetResources -
func (c *DefaultAPIController) BladesGetResources(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	result, err := c.service.BladesGetResources(r.Context(), applianceIdParam, bladeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesPost -
func (c *DefaultAPIController) BladesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	credentialsParam := Credentials{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&credentialsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCredentialsRequired(credentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCredentialsConstraints(credentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BladesPost(r.Context(), applianceIdParam, credentialsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BladesResyncById -
func (c *DefaultAPIController) BladesResyncById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	applianceIdParam := params["applianceId"]
	bladeIdParam := params["bladeId"]
	result, err := c.service.BladesResyncById(r.Context(), applianceIdParam, bladeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CfmGet -
func (c *DefaultAPIController) CfmGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.CfmGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CfmV1Get -
func (c *DefaultAPIController) CfmV1Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.CfmV1Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostGetMemory -
func (c *DefaultAPIController) HostGetMemory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	result, err := c.service.HostGetMemory(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsComposeMemory -
func (c *DefaultAPIController) HostsComposeMemory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	composeMemoryRequestParam := ComposeMemoryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&composeMemoryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComposeMemoryRequestRequired(composeMemoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComposeMemoryRequestConstraints(composeMemoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.HostsComposeMemory(r.Context(), hostIdParam, composeMemoryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsDeleteById -
func (c *DefaultAPIController) HostsDeleteById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	result, err := c.service.HostsDeleteById(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsFreeMemoryById -
func (c *DefaultAPIController) HostsFreeMemoryById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	memoryIdParam := params["memoryId"]
	result, err := c.service.HostsFreeMemoryById(r.Context(), hostIdParam, memoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGet - Get CXL Host information.
func (c *DefaultAPIController) HostsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HostsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGetById - Get information for a single CXL Host.
func (c *DefaultAPIController) HostsGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	result, err := c.service.HostsGetById(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGetMemoryById -
func (c *DefaultAPIController) HostsGetMemoryById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	memoryIdParam := params["memoryId"]
	result, err := c.service.HostsGetMemoryById(r.Context(), hostIdParam, memoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGetMemoryDeviceById -
func (c *DefaultAPIController) HostsGetMemoryDeviceById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	memoryDeviceIdParam := params["memoryDeviceId"]
	result, err := c.service.HostsGetMemoryDeviceById(r.Context(), hostIdParam, memoryDeviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGetMemoryDevices -
func (c *DefaultAPIController) HostsGetMemoryDevices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	result, err := c.service.HostsGetMemoryDevices(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGetPortById -
func (c *DefaultAPIController) HostsGetPortById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	portIdParam := params["portId"]
	result, err := c.service.HostsGetPortById(r.Context(), hostIdParam, portIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsGetPorts -
func (c *DefaultAPIController) HostsGetPorts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	result, err := c.service.HostsGetPorts(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsPost - Add a CXL host to be managed by CFM.
func (c *DefaultAPIController) HostsPost(w http.ResponseWriter, r *http.Request) {
	credentialsParam := Credentials{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&credentialsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCredentialsRequired(credentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCredentialsConstraints(credentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.HostsPost(r.Context(), credentialsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HostsResyncById -
func (c *DefaultAPIController) HostsResyncById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	result, err := c.service.HostsResyncById(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RootGet -
func (c *DefaultAPIController) RootGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RootGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
